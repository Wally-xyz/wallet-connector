{"version":3,"file":"messenger.js","sourceRoot":"","sources":["../src/messenger.ts"],"names":[],"mappings":"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","sourcesContent":["import { EmitterMessage, MessengerOptions, WorkerMessage } from './types';\n\nexport default class Messenger {\n  private worker;\n  private emitterCallbacks: Partial<Record<string, Array<(a?: any) => void>>> =\n    {};\n  private workerCallbacks: Partial<Record<WorkerMessage, Array<() => void>>> =\n    {};\n\n  constructor({ sharedWorkerUrl, _disableSharedWorker }: MessengerOptions) {\n    if (!_disableSharedWorker && sharedWorkerUrl && SharedWorker) {\n      this.worker = new SharedWorker(sharedWorkerUrl);\n      this.connectToSharedWorker();\n    }\n  }\n\n  public addListener(name: string, cb: (a?: any) => void): void {\n    if (!this.emitterCallbacks[name]) {\n      this.emitterCallbacks[name] = [];\n    }\n    this.emitterCallbacks[name]?.push(cb);\n  }\n\n  public removeListener(name: string, fn: any): void {\n    const idx = this.emitterCallbacks[name]?.indexOf(fn);\n    if (idx !== undefined && idx > -1) {\n      this.emitterCallbacks[name]?.splice(idx, 1);\n    }\n  }\n\n  public removeAllListeners(name: string) {\n    this.emitterCallbacks[name] = [];\n  }\n\n  /**\n   * The function used to call all listeners for a specific messsage.\n   * Does NOT remove them, should be removed with a separate `removeListener()`\n   * or `removeAllListeners` call. There isn't really a well-defined list of\n   * messages to handle, so this is open-ended on purpose.\n   * `accountsChanged` is really the big important one used throughout public apps.\n   * @param message The name of the message we're emitting\n   * @param address [optional] The current wallet address,\n   * only used when handling accountsChanged messages.\n   */\n  public emit(message: string, address?: string): void {\n    if (message === EmitterMessage.ACCOUNTS_CHANGED && !address) {\n      throw new Error(\n        'address not provided for emmitting `accountsChanged` message'\n      );\n    }\n\n    this.emitterCallbacks[message]?.forEach((cb) => {\n      cb(message === EmitterMessage.ACCOUNTS_CHANGED ? [address] : undefined);\n    });\n  }\n\n  private connectToSharedWorker(): void {\n    if (!this.worker) {\n      console.error(\n        'SharedWorker not available, falling back to less-than-ideal experience.'\n      );\n      return;\n    }\n\n    this.worker.port.start();\n    this.worker.port.onmessage = (e: MessageEvent) => {\n      this.handleWorkerMessage(e.data);\n    };\n  }\n\n  public handleWorkerMessage(message: WorkerMessage): void {\n    if (!this.worker) {\n      return;\n    }\n    this.workerCallbacks[message]?.forEach((cb) => cb());\n  }\n\n  public onWorkerMessage(message: WorkerMessage, fn: () => void) {\n    if (!this.worker) {\n      return;\n    }\n    if (!this.workerCallbacks[message]) {\n      this.workerCallbacks[message] = [];\n    }\n    this.workerCallbacks[message]?.push(fn);\n  }\n\n  public sendWorkerMessage(message: WorkerMessage) {\n    if (!this.worker) {\n      return;\n    }\n    this.worker.port.postMessage(message);\n  }\n}\n"]}