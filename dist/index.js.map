{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,MAAa,cAAc;IAGzB,YAA6B,QAAgB,EAAmB,OAA+B;;QAAlE,aAAQ,GAAR,QAAQ,CAAQ;QAAmB,YAAO,GAAP,OAAO,CAAwB;QAC7F,IAAI,CAAC,IAAI,GAAG,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,uBAAuB,CAAC;IAChG,CAAC;IAEM,cAAc;;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACvC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtB,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5E,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,CAAC;YACnD,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,cAAc,WAAW,CAAC,QAAQ,EAAE,EAAE;YACpD,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,cAAc,WAAW,CAAC,QAAQ,EAAE,EAAE,CACrD,CAAC;IACJ,CAAC;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC;IAClC,CAAC;IAEY,cAAc;;;YACzB,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAChE,IAAI,WAAW,IAAI,WAAW,KAAK,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC3D,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,aAAa,EAAE;oBAC/B,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;iBACtC;aACF;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAEvD,IAAI,IAAc,CAAC;YACnB,IAAI;gBACF,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,cAAc,EAAE;oBAC7C,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kBAAkB;wBAClC,MAAM,EAAE,kBAAkB;qBAC3B;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,QAAQ;qBACT,CAAC;iBACH,CAAC,CAAC;gBACH,IAAI,IAAI,IAAI,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,KAAI,GAAG,CAAC,EAAE;oBAC9C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC/B;qBAAM;oBACL,IAAI,CAAC,WAAW,EAAE,CAAC;oBACnB,OAAO,CAAC,KAAK,CAAC,8FAA8F,CAAC,CAAC;iBAC/G;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,EAAE,CAAC,CAAC;gBAC5D,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;;KACF;IAEO,YAAY,CAAC,SAAiB;QACpC,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,QAAQ,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC;IAEO,YAAY;QAClB,OAAO,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAEO,iBAAiB,CAAC,MAAM,GAAG,EAAE;QACnC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACxD;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;QAED,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,EAAE,SAAS,EAAE,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YACzD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SAC/B;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAEO,SAAS,CAAC,KAAa;QAC7B,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAEO,QAAQ;QACd,OAAO,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,CAAC,CAAC;IACpE,CAAC;IAEO,WAAW;QACjB,YAAY,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,CAAC,CAAC;IAChE,CAAC;IAEK,WAAW,CAAC,OAAe;;YAC/B,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChE,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,0BAA0B,WAAW,EAAE,EAAE;gBAC5E,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,EAAE,EAAE;oBAC9C,cAAc,EAAE,kBAAkB;oBAClC,MAAM,EAAE,kBAAkB;iBAC3B;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;aAC3F;YACD,OAAO,MAAM,IAAI,CAAC,IAAI,EAA4B,CAAC;QACrD,CAAC;KAAA;CACF;AAhHD,wCAgHC","sourcesContent":["import { SignedMessage, WallyConnectorOptions } from './types';\n\nexport class WallyConnector {\n  private host: string;\n\n  constructor(private readonly clientId: string, private readonly options?: WallyConnectorOptions) {\n    this.host = (this.options?.isDevelopment) ? 'http://localhost:3000' : 'https://api.wally.xyz';\n  }\n\n  public loginWithEmail() {\n    const state = this.generateStateCode();\n    this.saveState(state);\n    const queryParams = new URLSearchParams({ clientId: this.clientId, state });\n    window.location.replace((this.options?.isDevelopment)\n      ? `${this.host}/oauth/otp?${queryParams.toString()}`\n      : `${this.host}/oauth/otp?${queryParams.toString()}`\n    );\n  }\n\n  public isRedirected() {\n    return this.getState() !== null;\n  }\n\n  public async handleRedirect() {\n    const storedState = this.getState();\n    const queryParams = new URLSearchParams(window.location.search);\n    if (storedState && storedState !== queryParams.get('state')) {\n      this.deleteState();\n      if (this.options?.isDevelopment) {\n        console.error('Invalid Wally state');\n      }\n    }\n    this.deleteState();\n    const authCode = queryParams.get('authorization_code');\n\n    let resp: Response;\n    try {\n      resp = await fetch(`${this.host}/oauth/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({\n          authCode,\n        }),\n      });\n      if (resp && (!resp?.ok || resp?.status >= 300)) {\n        const data = await resp.json();\n        this.setAuthToken(data.token);\n      } else {\n        this.deleteState();\n        console.error('Wally server returned a non-successful response when exchanging authorization code for token');\n      }\n    } catch (err) {\n      console.error(`Unable to fetch Wally access token: ${err}`);\n      this.deleteState();\n    }\n  }\n\n  private setAuthToken(authToken: string): void {\n    localStorage.setItem(`wally:${this.clientId}:token`, authToken);\n  }\n\n  private getAuthToken(): string | null {\n    return localStorage.getItem(`wally:${this.clientId}:token`);\n  }\n\n  private generateStateCode(length = 10) {\n    const chars = [];\n    for (let i = 0; i < 26; i++) {\n      chars.push(String.fromCharCode('a'.charCodeAt(0) + i));\n      chars.push(String.fromCharCode('A'.charCodeAt(0) + i));\n    }\n    for (let i = 0; i < 10; i++) {\n      chars.push('0'.charCodeAt(0) + i);\n    }\n\n    const authCode = [];\n    for (let charCount = 0; charCount < length; charCount++) {\n      const randInt = Math.floor(Math.random() * chars.length);\n      authCode.push(chars[randInt]);\n    }\n    return authCode.join('');\n  }\n\n  private saveState(state: string) {\n    localStorage.setItem(`wally:${this.clientId}:state:token`, state);\n  }\n\n  private getState(): string | null {\n    return localStorage.getItem(`wally:${this.clientId}:state:token`);\n  }\n\n  private deleteState() {\n    localStorage.removeItem(`wally:${this.clientId}:state:token`);\n  }\n\n  async signMessage(message: string): Promise<SignedMessage> {\n    const queryString = new URLSearchParams({ message }).toString();\n    const resp = await fetch(`${this.host}/app/user/sign-message?${queryString}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${this.getAuthToken()}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n\n    if (!resp.ok || resp.status >= 300) {\n      throw new Error('Wally server returned a non-successful response when signing a message');\n    }\n    return await resp.json() as Promise<SignedMessage>;\n  }\n}\n"]}