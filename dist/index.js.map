{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,0DAAiC;AAEjC,IAAI,KAAK,GAAwB,SAAS,CAAC;AAE3C,MAAM,aAAa,GAAG,CAAC,OAAiB,EAAE,EAAE;IAC1C,IAAI,CAAC,KAAK,EAAE;QACV,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,CAAC,KAAK,CACX,qEAAqE,CACtE,CAAC;SACH;QACD,OAAO,KAAK,CAAC;KACd;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEK,MAAM,IAAI,GAAG,CAAC,OAAqB,EAAQ,EAAE;IAClD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;QACjC,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;QAC7D,OAAO;KACR;IACD,KAAK,GAAG,KAAK,IAAI,IAAI,kBAAO,CAAC,OAAO,CAAC,CAAC;IAEtC,IAAI,KAAK,CAAC,YAAY,EAAE,EAAE;QACxB,KAAK,CAAC,cAAc,EAAE,CAAC;KACxB;IAED,OAAO;AACT,CAAC,CAAC;AAZW,QAAA,IAAI,QAYf;AAEK,MAAM,WAAW,GAAG,CAAC,OAAiB,EAAuB,EAAE;IACpE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE;QAC3B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AANW,QAAA,WAAW,eAMtB;AAEF;;;;;GAKG;AACI,MAAM,KAAK,GAAG,CAAO,KAAc,EAAE,EAAE;IAC5C,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC,EAAE;QACrD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC,CAAC;KAC5E;IAED,OAAO,KAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAA,CAAC;AANW,QAAA,KAAK,SAMhB;AAEK,MAAM,WAAW,GAAG,CAAC,OAAe,EAAQ,EAAE;IACnD,IAAI,CAAC,aAAa,EAAE,EAAE;QACpB,OAAO;KACR;IAED,KAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC,CAAC;AANW,QAAA,WAAW,eAMtB;AAEK,MAAM,MAAM,GAAG,GAAG,EAAE;IACzB,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,EAAE,CAAC;AAClB,CAAC,CAAC;AAFW,QAAA,MAAM,UAEjB;AAEK,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,KAAK,GAAG,SAAS,CAAC;AACpB,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB","sourcesContent":["import { WallyOptions } from './types';\n\nimport WallyJS from './wally-js';\n\nlet wally: WallyJS | undefined = undefined;\n\nconst checkInjected = (supress?: boolean) => {\n  if (!wally) {\n    if (!supress) {\n      console.error(\n        \"Couldn't find wally instance. Ensure init() method is called first.\"\n      );\n    }\n    return false;\n  }\n  return true;\n};\n\nexport const init = (options: WallyOptions): void => {\n  if (typeof window === 'undefined') {\n    console.error('Ensure init() is called on the client only.');\n    return;\n  }\n  wally = wally || new WallyJS(options);\n\n  if (wally.isRedirected()) {\n    wally.handleRedirect();\n  }\n\n  return;\n};\n\nexport const getProvider = (supress?: boolean): WallyJS | undefined => {\n  if (!checkInjected(supress)) {\n    return undefined;\n  }\n\n  return wally;\n};\n\n/**\n * Must be used if `disableLoginOnRequest` is true.\n * Can optionally pass in an email to sign up. [wip]\n * @param email\n * @returns\n */\nexport const login = async (email?: string) => {\n  if (!checkInjected() || (wally && wally.isLoggedIn())) {\n    return Promise.reject(new Error('No wally instance or already logged in'));\n  }\n\n  return wally!.login(email);\n};\n\nexport const finishLogin = (address: string): void => {\n  if (!checkInjected()) {\n    return;\n  }\n\n  wally!.finishLogin(address);\n};\n\nexport const logout = () => {\n  wally?.logout();\n};\n\nexport const clearInstance = () => {\n  wally = undefined;\n};\n"]}