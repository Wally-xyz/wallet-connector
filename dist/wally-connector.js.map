{"version":3,"file":"wally-connector.js","sourceRoot":"","sources":["../src/wally-connector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,mCAiBiB;AAEjB,2CAA0E;AAE1E,MAAM,cAAc;IAuBlB,YAAY,EACV,QAAQ,EACR,oBAAoB,EACpB,qBAAqB,EACrB,WAAW,EACX,OAAO,EACP,eAAe,EACf,OAAO,EACP,oBAAoB,EACpB,cAAc,EACd,eAAe,GACO;QAjCxB,SAAS;QACF,oBAAe,GAAkB,IAAI,CAAC;QAIrC,yBAAoB,GAAG,KAAK,CAAC;QAQrC,iBAAiB;QACT,sBAAiB,GAAG,KAAK,CAAC;QAC1B,qBAAgB,GACtB,EAAE,CAAC;QACG,gBAAW,GAAG,KAAK,CAAC;QACpB,WAAM,GAAwB,IAAI,CAAC;QACnC,oBAAe,GACrB,EAAE,CAAC;QA6BE,gBAAW,GAAG,CAAC,OAAe,EAAQ,EAAE;YAC7C,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,OAAO;aACR;YACD,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,sBAAc,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;YACpD,IAAI,CAAC,IAAI,CAAC,sBAAc,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC,CAAC;QAtBA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,CAAC,CAAC,oBAAoB,CAAC;QACnD,IAAI,CAAC,IAAI,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,IAAI,oBAAQ,CAAC;QACpD,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,cAAc,CAAC;QACtC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,eAAe,CAAC;QACtC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;QAEzB,IAAI,CAAC,oBAAoB,IAAI,eAAe,IAAI,YAAY,EAAE;YAC5D,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,eAAe,CAAC,CAAC;YAChD,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;IACH,CAAC;IAWM,EAAE,CAAC,IAAY,EAAE,EAAqB;;QAC3C,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SAClC;QACD,MAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0CAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACxC,CAAC;IAEM,WAAW,CAAC,IAAY,EAAE,EAAqB;QACpD,IAAI,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACpB,CAAC;IAEM,cAAc,CAAC,IAAY,EAAE,EAAO;;QACzC,MAAM,GAAG,GAAG,MAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0CAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QACrD,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC,EAAE;YACnB,MAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,0CAAE,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SAC7C;IACH,CAAC;IAEM,kBAAkB,CAAC,IAAY;QACpC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;IACnC,CAAC;IAED;;;;;;;;;OASG;IACK,IAAI,CAAC,OAAe,EAAE,OAAgB;;QAC5C,IAAI,OAAO,KAAK,sBAAc,CAAC,gBAAgB,IAAI,CAAC,OAAO,EAAE;YAC3D,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAC;YACF,OAAO;SACR;QAED,MAAA,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,0CAAE,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YAC7C,EAAE,CAAC,OAAO,KAAK,sBAAc,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,qBAAqB;QAC3B,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO,CAAC,KAAK,CACX,yEAAyE,CAC1E,CAAC;YACF,OAAO;SACR;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAe,EAAE,EAAE;YAC/C,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC;IACJ,CAAC;IAEO,mBAAmB,CAAC,OAAsB;;QAChD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO;SACR;QACD,MAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,0CAAE,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC;IAEO,eAAe,CAAC,OAAsB,EAAE,EAAc;;QAC5D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,OAAO;SACR;QACD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAClC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;SACpC;QACD,MAAA,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,0CAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEY,KAAK;;YAChB,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,OAAO,OAAO,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;aAC9C;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAClB,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;gBACxC,OAAO;aACR;YACD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YACtB,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC;YAC7C,MAAM,WAAW,GAAG,IAAI,eAAe,iBACrC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,IACF,CAAC,CAAC,WAAW,IAAI,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,EAC3C,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,cAAc,WAAW,CAAC,QAAQ,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;YAE1E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,MAAM,QAAQ,GAAG,GAAG,EAAE;oBACpB,IAAI,CAAC,cAAc,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;oBAC/D,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC;gBACF,IAAI,CAAC,EAAE,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;gBAEnD,MAAM,UAAU,GAAG,GAAG,EAAE;oBACtB,OAAO,CAAC,KAAK,CACX,8DAA8D,CAC/D,CAAC;gBACJ,CAAC,CAAC;gBAEF,IAAI,CAAC,eAAe,CAAC,qBAAa,CAAC,aAAa,EAAE,GAAG,EAAE;oBACrD,kFAAkF;oBAClF,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;wBACxB,UAAU,EAAE,CAAC;wBACb,MAAM,EAAE,CAAC;wBACT,OAAO;qBACR;oBACD,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;gBACH,IAAI,CAAC,eAAe,CAAC,qBAAa,CAAC,aAAa,EAAE,GAAG,EAAE;oBACrD,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,CAAC;gBACX,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC;IAClC,CAAC;IAEM,UAAU;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC/B,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC;IAC3B,CAAC;IAEY,cAAc;;YACzB,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAC1B,OAAO;aACR;YACD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;YAE9B,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACpC,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAChE,IAAI,WAAW,IAAI,WAAW,KAAK,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;gBAC3D,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;iBACtC;aACF;YACD,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAEvD,IAAI,IAAc,CAAC;YACnB,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,MAAM,OAAO,GAAG,QAAQ,CAAC,cAAc,CAAC,+BAAmB,CAAC,CAAC;YAE7D,IAAI;gBACF,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,cAAc,EAAE;oBAC7C,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,cAAc,EAAE,kBAAkB;wBAClC,MAAM,EAAE,kBAAkB;qBAC3B;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,QAAQ;qBACT,CAAC;iBACH,CAAC,CAAC;gBAEH,IAAI,IAAI,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,IAAG,GAAG,EAAE;oBAC1C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAC9B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC;oBACnC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACzD;qBAAM;oBACL,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC1B,OAAO,CAAC,KAAK,CACX,kGAAkG,CACnG,CAAC;iBACH;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,KAAK,GAAG,GAAG,CAAC;gBACZ,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,EAAE,CAAC,CAAC;aAC7D;YAED,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,MAAM;oBACT,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAa,CAAC,aAAa,CAAC;oBAC3D,CAAC,CAAC,EAAE,CAAC;gBAEP,IAAI,OAAO,EAAE;oBACX,OAAO,CAAC,SAAS,GAAG,4BAA4B,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC;oBACnE,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;iBAC7B;gBACD,OAAO;aACR;YAED,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAa,CAAC,aAAa,CAAC,CAAC;aAC3D;YAED,OAAO;gBACL,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS;oBAChB,2DAA2D,CAAC;gBAChE,CAAC,CAAC,EAAE,CAAC;YAEP,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC9B,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACvC;QACH,CAAC;KAAA;IAEO,YAAY,CAAC,SAAiB;QACpC,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,QAAQ,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC;IAEO,YAAY;QAClB,OAAO,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAEO,iBAAiB,CAAC,MAAM,GAAG,EAAE;QACnC,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SACxD;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SACnC;QAED,MAAM,QAAQ,GAAG,EAAE,CAAC;QACpB,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,EAAE,SAAS,EAAE,EAAE;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YACzD,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;SAC/B;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAEO,SAAS,CAAC,KAAa;QAC7B,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAEO,QAAQ;QACd,OAAO,YAAY,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,CAAC,CAAC;IACpE,CAAC;IAEO,WAAW;QACjB,YAAY,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,QAAQ,cAAc,CAAC,CAAC;IAChE,CAAC;IAEO,aAAa,CAAC,IAAoB;QACxC,OAAO,MAAM,CAAC,MAAM,CAAC,uBAAe,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAClE,CAAC;IAEO,WAAW,CAAC,IAAoB;QACtC,OAAO,MAAM,CAAC,MAAM,CAAC,qBAAa,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,CAAC;IAED;;OAEG;IACU,SAAS,CAAC,GAAQ;;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC;KAAA;IAED;;;;;;;;;;;;;;;OAeG;IACG,OAAO,CACX,GAAkB;;YAElB,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,CAAC,GAAG,CACT,qBAAqB,GAAG,CAAC,MAAM,eAC5B,GAAW,CAAC,MAAM,IAAI,MACzB,EAAE,CACH,CAAC;aACH;YAED,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE;gBACtB,8BAA8B;gBAC9B,4DAA4D;gBAC5D,IAAI,GAAG,CAAC,MAAM,KAAK,uBAAe,CAAC,QAAQ,EAAE;oBAC3C,OAAO,OAAO,CAAC,OAAO,CAAC,EAAS,CAAC,CAAC;iBACnC;gBACD,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;aAClC;YAED,IAAI,GAAG,CAAC;YACR,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBAClC,GAAG,GAAG,IAAI,CAAC,YAAY,CACrB,GAAG,CAAC,MAAyB,EAC7B,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAA+B,CAAC,CAAC,CAAC,SAAS,CACtC,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACvC,GAAG,GAAG,IAAI,CAAC,UAAU,CACnB,GAAG,CAAC,MAAuB,EAC3B,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAA6B,CAAC,CAAC,CAAC,SAAS,CACjE,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,IAAI,CACV,WAAW,GAAG,CAAC,MAAM,yHAAyH,CAC/I,CAAC;gBACF,GAAG,GAAG,IAAI,CAAC,UAAU,CACnB,GAAG,CAAC,MAAa,EACjB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAAc,CAAC,CAAC,CAAC,SAAS,CAClD,CAAC;aACH;YAED,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;aACzC;YACD,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAED;;;;;;;;;;OAUG;IACK,eAAe,CACrB,GAAkB;QAElB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,qBAAqB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACpD,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;oBACrB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,MAAM,QAAQ,GAAG,GAAG,EAAE;oBACpB,IAAI,CAAC,cAAc,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;oBAC/D,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC;gBACF,IAAI,CAAC,EAAE,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;aACpD;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CACvB,MAAS,EACT,MAA4B;QAE5B,QAAQ,MAAM,EAAE;YACd,KAAK,uBAAe,CAAC,IAAI;gBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAG,MAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAChE,KAAK,uBAAe,CAAC,aAAa;gBAChC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAG,MAA6B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACxE,KAAK,uBAAe,CAAC,UAAU,CAAC;YAChC,KAAK,uBAAe,CAAC,aAAa,CAAC,CAAC;gBAClC,wDAAwD;gBACxD,MAAM,IAAI,GAAI,MAA0B,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBAC5B,OAAO,IAAI,CAAC;iBACb;;oBAAM,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACpC;YACD,KAAK,uBAAe,CAAC,gBAAgB,CAAC;YACtC,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,KAA6B,MAAgC,CAAC,CAAC,CAAC,EAAhE,EAAE,GAAG,EAAE,QAAQ,OAAiD,EAA5C,GAAG,cAAvB,mBAAyB,CAAuC,CAAC;gBACvE,OAAO,IAAI,CAAC,SAAS,iCAChB,GAAG,KACN,QAAQ,EAAE,QAAQ,IAAI,GAAG,IACzB,CAAC;aACJ;YACD;gBACE,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,iBAAiB,CAAC,MAAuB;QAC/C,OAAO,CACL;YACE,uBAAe,CAAC,IAAI;YACpB,uBAAe,CAAC,aAAa;YAC7B,uBAAe,CAAC,UAAU;YAC1B,uBAAe,CAAC,aAAa;YAC7B,uBAAe,CAAC,gBAAgB;YAChC,uBAAe,CAAC,gBAAgB;SACjC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CACvB,CAAC;IACJ,CAAC;IAEO,mBAAmB,CACzB,MAAS,EACT,IAAS;QAET,QAAQ,MAAM,EAAE;YACd,KAAK,uBAAe,CAAC,QAAQ,CAAC;YAC9B,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBAC/B,OAAO,CAAC,OAAO,CAAqB,CAAC;aACtC;YACD,KAAK,uBAAe,CAAC,IAAI,CAAC;YAC1B,KAAK,uBAAe,CAAC,aAAa,CAAC;YACnC,KAAK,uBAAe,CAAC,gBAAgB,CAAC;YACtC,KAAK,uBAAe,CAAC,UAAU,CAAC;YAChC,KAAK,uBAAe,CAAC,aAAa,CAAC,CAAC;gBAClC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;gBAC3B,OAAO,SAAS,CAAC;aAClB;YACD,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;gBACtB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACW,YAAY,CACxB,MAAS,EACT,MAA4B;;YAE5B,IAAI,IAAc,CAAC;YACnB,IAAI;gBACF,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,UAAU,wBAAY,CAAC,MAAM,CAAC,EAAE,kBAC7D,MAAM,EAAE,MAAM,EACd,OAAO,kBACL,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,EAAE,EAAE,IAC3C,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;wBAChC,CAAC,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE;wBACxC,CAAC,CAAC,EAAE,CAAC,KAEN,CAAC,MAAM;oBACR,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI;oBACnB,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC;iBAC7C,CAAC,EACJ,CAAC;gBACH,IAAI,IAAI,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,IAAG,GAAG,EAAE;oBAC1C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAC/C;qBAAM;oBACL,OAAO,CAAC,KAAK,CACX,6EAA6E,MAAM,EAAE,CACtF,CAAC;iBACH;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CACX,gCAAgC,GAAG,0BAA0B,MAAM,EAAE,CACtE,CAAC;aACH;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;IAED;;;;;;OAMG;IACW,UAAU,CACtB,MAAS,EACT,MAA0B;;YAE1B,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,oBAAoB,EAAE;oBACzD,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,aAAa,EAAE,UAAU,IAAI,CAAC,YAAY,EAAE,EAAE;wBAC9C,cAAc,EAAE,kBAAkB;qBACnC;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,MAAM;wBACN,MAAM;qBACP,CAAC;iBACH,CAAC,CAAC;gBAEH,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE;oBAClC,OAAO,CAAC,KAAK,CACX,yEAAyE,MAAM,EAAE,CAClF,CAAC;iBACH;gBAED,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBACrD,IAAI,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;oBACjE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAI,CAAC;iBACb;qBAAM;oBACL,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAsB,CAAC;iBAC/B;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CACX,gCAAgC,GAAG,0BAA0B,MAAM,EAAE,CACtE,CAAC;aACH;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;CACF;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import {\n  EmitterMessage,\n  MethodNameType,\n  MethodResponse,\n  PersonalSignParams,\n  RequestObj,\n  RPCMethodName,\n  RPCMethodParams,\n  RPCResponse,\n  SignParams,\n  SignTypedParams,\n  WallyConnectorOptions,\n  WallyMethodName,\n  WallyMethodParams,\n  WallyResponse,\n  WorkerMessage,\n  WTransactionRequest,\n} from './types';\n\nimport { APP_ROOT, REDIRECT_CAPTION_ID, WALLY_ROUTES } from './constants';\n\nclass WallyConnector {\n  // Public\n  public selectedAddress: string | null = null;\n\n  // Options\n  private clientId: string | null;\n  private disableRedirectClose = false;\n  private host: string | null;\n  private isDevelopment: boolean;\n  private disableLoginOnRequest?: boolean;\n  private redirectUrl: string | undefined;\n  private verbose: boolean;\n  private onTokenFetched?: (address: string) => void;\n\n  // Internal State\n  private didHandleRedirect = false;\n  private emitterCallbacks: Partial<Record<string, Array<(a?: any) => void>>> =\n    {};\n  private isLoggingIn = false;\n  private worker: SharedWorker | null = null;\n  private workerCallbacks: Partial<Record<WorkerMessage, Array<() => void>>> =\n    {};\n\n  constructor({\n    clientId,\n    disableRedirectClose,\n    disableLoginOnRequest,\n    redirectURL,\n    verbose,\n    sharedWorkerUrl,\n    _devUrl,\n    _disableSharedWorker,\n    _isDevelopment,\n    _onTokenFetched,\n  }: WallyConnectorOptions) {\n    this.clientId = clientId;\n    this.disableRedirectClose = !!disableRedirectClose;\n    this.host = (_isDevelopment && _devUrl) || APP_ROOT;\n    this.isDevelopment = !!_isDevelopment;\n    this.disableLoginOnRequest = disableLoginOnRequest;\n    this.onTokenFetched = _onTokenFetched;\n    this.redirectUrl = redirectURL;\n    this.verbose = !!verbose;\n\n    if (!_disableSharedWorker && sharedWorkerUrl && SharedWorker) {\n      this.worker = new SharedWorker(sharedWorkerUrl);\n      this.connectToSharedWorker();\n    }\n  }\n\n  public finishLogin = (address: string): void => {\n    if (!this.isLoggingIn) {\n      return;\n    }\n    this.isLoggingIn = false;\n    this.emit(EmitterMessage.ACCOUNTS_CHANGED, address);\n    this.emit(EmitterMessage.CONNECTED);\n  };\n\n  public on(name: string, cb: (a?: any) => void): void {\n    if (!this.emitterCallbacks[name]) {\n      this.emitterCallbacks[name] = [];\n    }\n    this.emitterCallbacks[name]?.push(cb);\n  }\n\n  public addListener(name: string, cb: (a?: any) => void): void {\n    this.on(name, cb);\n  }\n\n  public removeListener(name: string, fn: any): void {\n    const idx = this.emitterCallbacks[name]?.indexOf(fn);\n    if (idx && idx > -1) {\n      this.emitterCallbacks[name]?.splice(idx, 1);\n    }\n  }\n\n  public removeAllListeners(name: string) {\n    this.emitterCallbacks[name] = [];\n  }\n\n  /**\n   * The function used to call all listeners for a specific messsage.\n   * Does NOT remove them, should be removed with a separate `removeListener()`\n   * or `removeAllListeners` call. There isn't really a well-defined list of\n   * messages to handle, so this is open-ended on purpose.\n   * `accountsChanged` is really the big important one used throughout public apps.\n   * @param message The name of the message we're emitting\n   * @param address [optional] The current wallet address,\n   * only used when handling accountsChanged messages.\n   */\n  private emit(message: string, address?: string): void {\n    if (message === EmitterMessage.ACCOUNTS_CHANGED && !address) {\n      throw new Error(\n        'address not provided for emmitting `accountsChanged` message'\n      );\n      return;\n    }\n\n    this.emitterCallbacks[message]?.forEach((cb) => {\n      cb(message === EmitterMessage.ACCOUNTS_CHANGED ? [address] : undefined);\n    });\n  }\n\n  private connectToSharedWorker(): void {\n    if (!this.worker) {\n      console.error(\n        'SharedWorker not available, falling back to less-than-ideal experience.'\n      );\n      return;\n    }\n\n    this.worker.port.start();\n    this.worker.port.onmessage = (e: MessageEvent) => {\n      this.handleWorkerMessage(e.data);\n    };\n  }\n\n  private handleWorkerMessage(message: WorkerMessage): void {\n    if (!this.worker) {\n      return;\n    }\n    this.workerCallbacks[message]?.forEach((cb) => cb());\n  }\n\n  private onWorkerMessage(message: WorkerMessage, fn: () => void) {\n    if (!this.worker) {\n      return;\n    }\n    if (!this.workerCallbacks[message]) {\n      this.workerCallbacks[message] = [];\n    }\n    this.workerCallbacks[message]?.push(fn);\n  }\n\n  public async login(): Promise<void> {\n    if (this.isLoggingIn) {\n      return Promise.reject('Already logging in.');\n    }\n    this.isLoggingIn = true;\n\n    if (!this.clientId) {\n      console.error('Please set a client ID');\n      return;\n    }\n    const state = this.generateStateCode();\n    this.saveState(state);\n    const redirectUrl = this.redirectUrl || null;\n    const queryParams = new URLSearchParams({\n      clientId: this.clientId,\n      state,\n      ...((redirectUrl && { redirectUrl }) || {}),\n    });\n\n    window.open(`${this.host}/oauth/otp?${queryParams.toString()}`, '_blank');\n\n    return new Promise((resolve, reject) => {\n      const listener = () => {\n        this.removeListener(EmitterMessage.ACCOUNTS_CHANGED, listener);\n        resolve();\n      };\n      this.on(EmitterMessage.ACCOUNTS_CHANGED, listener);\n\n      const logFailure = () => {\n        console.error(\n          'Error logging in to Wally. ☹️\\nPlease refresh and try again.'\n        );\n      };\n\n      this.onWorkerMessage(WorkerMessage.LOGIN_SUCCESS, () => {\n        // TODO: This needs to use the emitter. Will fix after restructuring/splitting up.\n        if (!this.getAuthToken()) {\n          logFailure();\n          reject();\n          return;\n        }\n        resolve();\n      });\n      this.onWorkerMessage(WorkerMessage.LOGIN_FAILURE, () => {\n        logFailure();\n        reject();\n      });\n    });\n  }\n\n  public isRedirected(): boolean {\n    return this.getState() !== null;\n  }\n\n  public isLoggedIn(): boolean {\n    return !!this.getAuthToken();\n  }\n\n  public isConnected(): boolean {\n    return this.isLoggedIn();\n  }\n\n  public async handleRedirect(): Promise<void> {\n    if (this.didHandleRedirect) {\n      return;\n    }\n    this.didHandleRedirect = true;\n\n    const storedState = this.getState();\n    const queryParams = new URLSearchParams(window.location.search);\n    if (storedState && storedState !== queryParams.get('state')) {\n      this.deleteState();\n      if (this.isDevelopment) {\n        console.error('Invalid Wally state');\n      }\n    }\n    this.deleteState();\n    const authCode = queryParams.get('authorization_code');\n\n    let resp: Response;\n    let error = null;\n    const caption = document.getElementById(REDIRECT_CAPTION_ID);\n\n    try {\n      resp = await fetch(`${this.host}/oauth/token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        },\n        body: JSON.stringify({\n          authCode,\n        }),\n      });\n\n      if (resp && resp?.ok && resp?.status < 300) {\n        const data = await resp.json();\n        this.setAuthToken(data.token);\n        this.selectedAddress = data.wallet;\n        this.onTokenFetched && this.onTokenFetched(data.wallet);\n      } else {\n        error = await resp.text();\n        console.error(\n          'The Wally server returned a non-successful response when exchanging authorization code for token'\n        );\n      }\n    } catch (err) {\n      error = err;\n      console.error(`Unable to fetch Wally access token: ${err}`);\n    }\n\n    if (error) {\n      this.deleteState();\n      this.worker\n        ? this.worker.port.postMessage(WorkerMessage.LOGIN_FAILURE)\n        : {};\n\n      if (caption) {\n        caption.innerText = `Error retreiving token.\\n${error.toString()}`;\n        caption.style.color = 'red';\n      }\n      return;\n    }\n\n    if (this.worker) {\n      this.worker.port.postMessage(WorkerMessage.LOGIN_SUCCESS);\n    }\n\n    caption\n      ? (caption.innerText =\n          'Success. You may now close this page and refresh the app.')\n      : {};\n\n    if (!this.disableRedirectClose) {\n      window.setTimeout(window.close, 1000);\n    }\n  }\n\n  private setAuthToken(authToken: string): void {\n    localStorage.setItem(`wally:${this.clientId}:token`, authToken);\n  }\n\n  private getAuthToken(): string | null {\n    return localStorage.getItem(`wally:${this.clientId}:token`);\n  }\n\n  private generateStateCode(length = 10) {\n    const chars = [];\n    for (let i = 0; i < 26; i++) {\n      chars.push(String.fromCharCode('a'.charCodeAt(0) + i));\n      chars.push(String.fromCharCode('A'.charCodeAt(0) + i));\n    }\n    for (let i = 0; i < 10; i++) {\n      chars.push('0'.charCodeAt(0) + i);\n    }\n\n    const authCode = [];\n    for (let charCount = 0; charCount < length; charCount++) {\n      const randInt = Math.floor(Math.random() * chars.length);\n      authCode.push(chars[randInt]);\n    }\n    return authCode.join('');\n  }\n\n  private saveState(state: string) {\n    localStorage.setItem(`wally:${this.clientId}:state:token`, state);\n  }\n\n  private getState(): string | null {\n    return localStorage.getItem(`wally:${this.clientId}:state:token`);\n  }\n\n  private deleteState() {\n    localStorage.removeItem(`wally:${this.clientId}:state:token`);\n  }\n\n  private isWallyMethod(name: MethodNameType): name is WallyMethodName {\n    return Object.values(WallyMethodName).indexOf(name as any) > -1;\n  }\n\n  private isRPCMethod(name: MethodNameType): name is RPCMethodName {\n    return Object.values(RPCMethodName).indexOf(name as any) > -1;\n  }\n\n  /**\n   * @deprecated - see this.request()\n   */\n  public async sendAsync(req: any) {\n    return this.request(req);\n  }\n\n  /**\n   * This is the major exposed method for supporting JSON RPC methods\n   * and associated wallet/blockchain functionality.\n   * There are two main types of requests: those that require wallet info\n   * (address, signing), and those that do not (gas prices, last block).\n   * We route the former to customized endpoints on the backend that handle\n   * this extra wallet fetching and logic, and the latter to an endpoint\n   * that essentially works as a passthrough to ethers/alchemy.\n   *\n   * TODO: Move requesting logic and helpers to separate file/module\n   * @param req\n   * @param req.method - the name of the RPC method\n   * @param req.params - the required parameters for the method\n   * @returns Promise<MethodResponse> | null\n   * @see https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods\n   */\n  async request<T extends MethodNameType>(\n    req: RequestObj<T>\n  ): Promise<MethodResponse<T> | null> {\n    if (this.verbose) {\n      console.log(\n        `wally requesting: ${req.method} w/ params: ${\n          (req as any).params || 'none'\n        }`\n      );\n    }\n\n    if (!this.isLoggedIn()) {\n      // bandaid for courtyard, etc.\n      // (eth_accounts might just be for checking loggedin status)\n      if (req.method === WallyMethodName.ACCOUNTS) {\n        return Promise.resolve([] as any);\n      }\n      return this.deferredRequest(req);\n    }\n\n    let res;\n    if (this.isWallyMethod(req.method)) {\n      res = this.requestWally(\n        req.method as WallyMethodName,\n        'params' in req ? (req.params as WallyMethodParams<T>) : undefined\n      ) as Promise<WallyResponse<T>>;\n    } else if (this.isRPCMethod(req.method)) {\n      res = this.requestRPC(\n        req.method as RPCMethodName,\n        'params' in req ? (req.params as RPCMethodParams<T>) : undefined\n      );\n    } else {\n      console.warn(\n        `Method: ${req.method} is not officially supported by wally at this time, use at your own risk! Contact the wally team to get it prioritized.`\n      );\n      res = this.requestRPC(\n        req.method as any,\n        'params' in req ? (req.params as any) : undefined\n      );\n    }\n\n    if (this.verbose) {\n      console.log('wally response:', { res });\n    }\n    return res;\n  }\n\n  /**\n   * The promise for handling when trying to make a request before the user has\n   * logged in. Either:\n   * - trigger a login once (web3 standard), and trigger the request after the\n   *   login is complete (adding requests in the meantime to the emitter queue) OR\n   * - just add all requests to the emitter queue, waiting for the consumer to manually login.\n   * TODO: explore converting to async/await with callbacks to prevent indefinite blocking while\n   * waiting for a message that may potentially never come.\n   * @param req RequestObj\n   * @returns Promise\n   */\n  private deferredRequest<T extends MethodNameType>(\n    req: RequestObj<T>\n  ): Promise<MethodResponse<T> | null> {\n    return new Promise((resolve, reject) => {\n      if (!this.disableLoginOnRequest && !this.isLoggingIn) {\n        this.login().then(() => {\n          resolve(this.request(req));\n        });\n      } else {\n        const listener = () => {\n          this.removeListener(EmitterMessage.ACCOUNTS_CHANGED, listener);\n          resolve(this.request(req));\n        };\n        this.on(EmitterMessage.ACCOUNTS_CHANGED, listener);\n      }\n    });\n  }\n\n  private formatWallyParams<T extends WallyMethodName>(\n    method: T,\n    params: WallyMethodParams<T>\n  ): string {\n    switch (method) {\n      case WallyMethodName.SIGN:\n        return JSON.stringify({ message: (params as SignParams)[1] });\n      case WallyMethodName.PERSONAL_SIGN:\n        return JSON.stringify({ message: (params as PersonalSignParams)[0] });\n      case WallyMethodName.SIGN_TYPED:\n      case WallyMethodName.SIGN_TYPED_V4: {\n        // NOTE: Requests from opensea are already a json string\n        const data = (params as SignTypedParams)[1];\n        if (typeof data === 'string') {\n          return data;\n        } else return JSON.stringify(data);\n      }\n      case WallyMethodName.SEND_TRANSACTION:\n      case WallyMethodName.SIGN_TRANSACTION: {\n        const { gas, gasLimit, ...txn } = (params as WTransactionRequest[])[0];\n        return JSON.stringify({\n          ...txn,\n          gasLimit: gasLimit || gas,\n        });\n      }\n      default:\n        return JSON.stringify(params);\n    }\n  }\n\n  private isJSONContentType(method: WallyMethodName): boolean {\n    return (\n      [\n        WallyMethodName.SIGN,\n        WallyMethodName.PERSONAL_SIGN,\n        WallyMethodName.SIGN_TYPED,\n        WallyMethodName.SIGN_TYPED_V4,\n        WallyMethodName.SIGN_TRANSACTION,\n        WallyMethodName.SEND_TRANSACTION,\n      ].indexOf(method) > -1\n    );\n  }\n\n  private formatWallyResponse<T extends WallyMethodName>(\n    method: T,\n    data: any\n  ): WallyResponse<T> | null {\n    switch (method) {\n      case WallyMethodName.ACCOUNTS:\n      case WallyMethodName.REQUEST_ACCOUNTS: {\n        const { address } = data;\n        this.selectedAddress = address;\n        return [address] as WallyResponse<T>;\n      }\n      case WallyMethodName.SIGN:\n      case WallyMethodName.PERSONAL_SIGN:\n      case WallyMethodName.SIGN_TRANSACTION:\n      case WallyMethodName.SIGN_TYPED:\n      case WallyMethodName.SIGN_TYPED_V4: {\n        const { signature } = data;\n        return signature;\n      }\n      case WallyMethodName.SEND_TRANSACTION: {\n        const { hash } = data;\n        return hash;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Method used doing wallet-related actions like requesting accounts\n   * and signing things - actions that require wallet/private key access\n   * and are basically the core wally value prop.\n   * @param method The RPC method name associated with the wally api call\n   * @param params The json rpc spec params (*not* wally's spec)\n   * @returns WallyResponse - adheres to the json rpc spec\n   */\n  private async requestWally<T extends WallyMethodName>(\n    method: T,\n    params: WallyMethodParams<T>\n  ): Promise<WallyResponse<T> | null> {\n    let resp: Response;\n    try {\n      resp = await fetch(`${this.host}/oauth/${WALLY_ROUTES[method]}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n          ...(this.isJSONContentType(method)\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n        },\n        ...(params &&\n          params.length > 0 && {\n            body: this.formatWallyParams(method, params),\n          }),\n      });\n      if (resp && resp?.ok && resp?.status < 300) {\n        const data = await resp.json();\n        return this.formatWallyResponse(method, data);\n      } else {\n        console.error(\n          `The Wally server returned a non-successful response when handling method: ${method}`\n        );\n      }\n    } catch (err) {\n      console.error(\n        `Wally server returned error: ${err} when handling method: ${method}`\n      );\n    }\n\n    return Promise.reject(new Error(`Invalid response for ${method}`));\n  }\n\n  /**\n   * Handle other non-wally-specific methods - forwards to ethers/alchemy\n   * on the backend\n   * @param method The RPC method name\n   * @param params The json rpc spec params\n   * @returns RPCResponse - adheres to the json rpc spec\n   */\n  private async requestRPC<T extends RPCMethodName>(\n    method: T,\n    params: RPCMethodParams<T>\n  ): Promise<RPCResponse<T> | null> {\n    try {\n      const resp = await fetch(`${this.host}/oauth/wallet/send`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.getAuthToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          method,\n          params,\n        }),\n      });\n\n      if (!resp.ok || resp.status >= 300) {\n        console.error(\n          `Wally server returned a non-successful response when handling method: ${method}`\n        );\n      }\n\n      const contentType = resp.headers.get('content-type');\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        const json = await resp.json();\n        return json;\n      } else {\n        const text = await resp.text();\n        return text as RPCResponse<T>;\n      }\n    } catch (err) {\n      console.error(\n        `Wally server returned error: ${err} when handling method: ${method}`\n      );\n    }\n    return Promise.reject(new Error(`Invalid response for ${method}`));\n  }\n}\n\nexport default WallyConnector;\n"]}