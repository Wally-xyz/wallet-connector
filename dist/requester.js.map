{"version":3,"file":"requester.js","sourceRoot":"","sources":["../src/requester.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA,2CAA2C;AAE3C,mCAgBiB;AAEjB,MAAqB,SAAS;IAY5B,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAoB;QACxE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC;QAEzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEO,aAAa,CAAC,IAAoB;QACxC,OAAO,MAAM,CAAC,MAAM,CAAC,uBAAe,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAClE,CAAC;IAEO,WAAW,CAAC,IAAoB;QACtC,OAAO,MAAM,CAAC,MAAM,CAAC,qBAAa,CAAC,CAAC,OAAO,CAAC,IAAW,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACU,OAAO,CAClB,GAAkB;;YAElB,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,CAAC,GAAG,CACT,qBAAqB,GAAG,CAAC,MAAM,eAC5B,GAAW,CAAC,MAAM,IAAI,MACzB,EAAE,CACH,CAAC;aACH;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACzB,8BAA8B;gBAC9B,4DAA4D;gBAC5D,IAAI,GAAG,CAAC,MAAM,KAAK,uBAAe,CAAC,QAAQ,EAAE;oBAC3C,OAAO,OAAO,CAAC,OAAO,CAAC,EAAS,CAAC,CAAC;iBACnC;qBAAM,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;oBACzC,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;iBAClC;aACF;YAED,IAAI,GAAG,CAAC;YACR,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBAClC,GAAG,GAAG,IAAI,CAAC,YAAY,CACrB,GAAG,CAAC,MAAyB,EAC7B,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAA+B,CAAC,CAAC,CAAC,SAAS,CACtC,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACvC,GAAG,GAAG,IAAI,CAAC,UAAU,CACnB,GAAG,CAAC,MAAuB,EAC3B,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAA6B,CAAC,CAAC,CAAC,SAAS,CACjE,CAAC;aACH;iBAAM;gBACL,OAAO,CAAC,IAAI,CACV,WAAW,GAAG,CAAC,MAAM,yHAAyH,CAC/I,CAAC;gBACF,GAAG,GAAG,IAAI,CAAC,UAAU,CACnB,GAAG,CAAC,MAAa,EACjB,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAE,GAAG,CAAC,MAAc,CAAC,CAAC,CAAC,SAAS,CAClD,CAAC;aACH;YAED,IAAI,IAAI,CAAC,OAAO,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;aACzC;YACD,OAAO,GAAG,CAAC;QACb,CAAC;KAAA;IAED;;;;;;;;;;OAUG;IACK,eAAe,CACrB,GAAkB;QAElB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;oBAC1B,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,MAAM,QAAQ,GAAG,GAAG,EAAE;oBACpB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;oBACzE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC7B,CAAC,CAAC;gBACF,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,sBAAc,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;aACvE;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,iBAAiB,CACvB,MAAS,EACT,MAA4B;QAE5B,QAAQ,MAAM,EAAE;YACd,KAAK,uBAAe,CAAC,IAAI;gBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAG,MAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAChE,KAAK,uBAAe,CAAC,aAAa;gBAChC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAG,MAA6B,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACxE,KAAK,uBAAe,CAAC,UAAU,CAAC;YAChC,KAAK,uBAAe,CAAC,aAAa,CAAC,CAAC;gBAClC,wDAAwD;gBACxD,MAAM,IAAI,GAAI,MAA0B,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;oBAC5B,OAAO,IAAI,CAAC;iBACb;;oBAAM,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aACpC;YACD,KAAK,uBAAe,CAAC,gBAAgB,CAAC;YACtC,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,KAA6B,MAAgC,CAAC,CAAC,CAAC,EAAhE,EAAE,GAAG,EAAE,QAAQ,OAAiD,EAA5C,GAAG,cAAvB,mBAAyB,CAAuC,CAAC;gBACvE,OAAO,IAAI,CAAC,SAAS,iCAChB,GAAG,KACN,QAAQ,EAAE,QAAQ,IAAI,GAAG,IACzB,CAAC;aACJ;YACD;gBACE,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SACjC;IACH,CAAC;IAEO,iBAAiB,CAAC,MAAuB;QAC/C,OAAO,CACL;YACE,uBAAe,CAAC,IAAI;YACpB,uBAAe,CAAC,aAAa;YAC7B,uBAAe,CAAC,UAAU;YAC1B,uBAAe,CAAC,aAAa;YAC7B,uBAAe,CAAC,gBAAgB;YAChC,uBAAe,CAAC,gBAAgB;SACjC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CACvB,CAAC;IACJ,CAAC;IAEO,mBAAmB,CACzB,MAAS,EACT,IAAS;QAET,QAAQ,MAAM,EAAE;YACd,KAAK,uBAAe,CAAC,QAAQ,CAAC;YAC9B,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;gBACzB,IAAI,CAAC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAqB,CAAC;aACtC;YACD,KAAK,uBAAe,CAAC,IAAI,CAAC;YAC1B,KAAK,uBAAe,CAAC,aAAa,CAAC;YACnC,KAAK,uBAAe,CAAC,gBAAgB,CAAC;YACtC,KAAK,uBAAe,CAAC,UAAU,CAAC;YAChC,KAAK,uBAAe,CAAC,aAAa,CAAC,CAAC;gBAClC,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;gBAC3B,OAAO,SAAS,CAAC;aAClB;YACD,KAAK,uBAAe,CAAC,gBAAgB,CAAC,CAAC;gBACrC,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;gBACtB,OAAO,IAAI,CAAC;aACb;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;;OAOG;IACW,YAAY,CACxB,MAAS,EACT,MAA4B;;YAE5B,IAAI,IAAc,CAAC;YACnB,IAAI;gBACF,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,UAAU,wBAAY,CAAC,MAAM,CAAC,EAAE,kBAC7D,MAAM,EAAE,MAAM,EACd,OAAO,kBACL,aAAa,EAAE,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAC5C,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC;wBAChC,CAAC,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE;wBACxC,CAAC,CAAC,EAAE,CAAC,KAEN,CAAC,MAAM;oBACR,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI;oBACnB,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,CAAC;iBAC7C,CAAC,EACJ,CAAC;gBACH,IAAI,IAAI,KAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA,IAAI,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,IAAG,GAAG,EAAE;oBAC1C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAC/C;qBAAM;oBACL,OAAO,CAAC,KAAK,CACX,6EAA6E,MAAM,EAAE,CACtF,CAAC;iBACH;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CACX,gCAAgC,GAAG,0BAA0B,MAAM,EAAE,CACtE,CAAC;aACH;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;IAED;;;;;;OAMG;IACW,UAAU,CACtB,MAAS,EACT,MAA0B;;YAE1B,IAAI;gBACF,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,oBAAoB,EAAE;oBACzD,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE;wBACP,aAAa,EAAE,UAAU,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;wBAC/C,cAAc,EAAE,kBAAkB;qBACnC;oBACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;wBACnB,MAAM;wBACN,MAAM;wBACN,QAAQ,EAAE,IAAI,CAAC,QAAQ;qBACxB,CAAC;iBACH,CAAC,CAAC;gBAEH,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE;oBAClC,OAAO,CAAC,KAAK,CACX,yEAAyE,MAAM,EAAE,CAClF,CAAC;iBACH;gBAED,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBACrD,IAAI,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAE;oBACjE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAI,CAAC;iBACb;qBAAM;oBACL,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;oBAC/B,OAAO,IAAsB,CAAC;iBAC/B;aACF;YAAC,OAAO,GAAG,EAAE;gBACZ,OAAO,CAAC,KAAK,CACX,gCAAgC,GAAG,0BAA0B,MAAM,EAAE,CACtE,CAAC;aACH;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,wBAAwB,MAAM,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC;KAAA;CACF;AA3RD,4BA2RC","sourcesContent":["import Auth from './auth';\nimport { WALLY_ROUTES } from './constants';\nimport Messenger from './messenger';\nimport {\n  EmitterMessage,\n  MethodNameType,\n  MethodResponse,\n  PersonalSignParams,\n  RequestObj,\n  RPCMethodName,\n  RPCMethodParams,\n  RPCResponse,\n  SignParams,\n  SignTypedParams,\n  WallyMethodName,\n  WallyMethodParams,\n  WallyResponse,\n  WTransactionRequest,\n  RequesterOptions,\n} from './types';\n\nexport default class Requester {\n  // Options\n  private clientId: string;\n  private verbose: boolean;\n\n  // Config\n  private host: string;\n\n  // Services\n  private messenger: Messenger;\n  private auth: Auth;\n\n  constructor({ clientId, verbose, host, auth, messenger }: RequesterOptions) {\n    this.clientId = clientId;\n    this.verbose = !!verbose;\n\n    this.host = host;\n\n    this.auth = auth;\n    this.messenger = messenger;\n  }\n\n  private isWallyMethod(name: MethodNameType): name is WallyMethodName {\n    return Object.values(WallyMethodName).indexOf(name as any) > -1;\n  }\n\n  private isRPCMethod(name: MethodNameType): name is RPCMethodName {\n    return Object.values(RPCMethodName).indexOf(name as any) > -1;\n  }\n\n  /**\n   * This is the major exposed method for supporting JSON RPC methods\n   * and associated wallet/blockchain functionality.\n   * There are two main types of requests: those that require wallet info\n   * (address, signing), and those that do not (gas prices, last block).\n   * We route the former to customized endpoints on the backend that handle\n   * this extra wallet fetching and logic, and the latter to an endpoint\n   * that essentially works as a passthrough to ethers/alchemy.\n   *\n   * TODO: Move requesting logic and helpers to separate file/module\n   * @param req\n   * @param req.method - the name of the RPC method\n   * @param req.params - the required parameters for the method\n   * @returns Promise<MethodResponse> | null\n   * @see https://ethereum.org/en/developers/docs/apis/json-rpc/#json-rpc-methods\n   */\n  public async request<T extends MethodNameType>(\n    req: RequestObj<T>\n  ): Promise<MethodResponse<T> | null> {\n    if (this.verbose) {\n      console.log(\n        `wally requesting: ${req.method} w/ params: ${\n          (req as any).params || 'none'\n        }`\n      );\n    }\n\n    if (!this.auth.getToken()) {\n      // bandaid for courtyard, etc.\n      // (eth_accounts might just be for checking loggedin status)\n      if (req.method === WallyMethodName.ACCOUNTS) {\n        return Promise.resolve([] as any);\n      } else if (this.isWallyMethod(req.method)) {\n        return this.deferredRequest(req);\n      }\n    }\n\n    let res;\n    if (this.isWallyMethod(req.method)) {\n      res = this.requestWally(\n        req.method as WallyMethodName,\n        'params' in req ? (req.params as WallyMethodParams<T>) : undefined\n      ) as Promise<WallyResponse<T>>;\n    } else if (this.isRPCMethod(req.method)) {\n      res = this.requestRPC(\n        req.method as RPCMethodName,\n        'params' in req ? (req.params as RPCMethodParams<T>) : undefined\n      );\n    } else {\n      console.warn(\n        `Method: ${req.method} is not officially supported by wally at this time, use at your own risk! Contact the wally team to get it prioritized.`\n      );\n      res = this.requestRPC(\n        req.method as any,\n        'params' in req ? (req.params as any) : undefined\n      );\n    }\n\n    if (this.verbose) {\n      console.log('wally response:', { res });\n    }\n    return res;\n  }\n\n  /**\n   * The promise for handling when trying to make a request before the user has\n   * logged in. Either:\n   * - trigger a login once (web3 standard), and trigger the request after the\n   *   login is complete (adding requests in the meantime to the emitter queue) OR\n   * - just add all requests to the emitter queue, waiting for the consumer to manually login.\n   * TODO: explore converting to async/await with callbacks to prevent indefinite blocking while\n   * waiting for a message that may potentially never come.\n   * @param req RequestObj\n   * @returns Promise\n   */\n  private deferredRequest<T extends MethodNameType>(\n    req: RequestObj<T>\n  ): Promise<MethodResponse<T> | null> {\n    return new Promise((resolve, reject) => {\n      if (!this.auth.isLoggingIn) {\n        this.auth.login().then(() => {\n          resolve(this.request(req));\n        });\n      } else {\n        const listener = () => {\n          this.messenger.removeListener(EmitterMessage.ACCOUNTS_CHANGED, listener);\n          resolve(this.request(req));\n        };\n        this.messenger.addListener(EmitterMessage.ACCOUNTS_CHANGED, listener);\n      }\n    });\n  }\n\n  private formatWallyParams<T extends WallyMethodName>(\n    method: T,\n    params: WallyMethodParams<T>\n  ): string {\n    switch (method) {\n      case WallyMethodName.SIGN:\n        return JSON.stringify({ message: (params as SignParams)[1] });\n      case WallyMethodName.PERSONAL_SIGN:\n        return JSON.stringify({ message: (params as PersonalSignParams)[0] });\n      case WallyMethodName.SIGN_TYPED:\n      case WallyMethodName.SIGN_TYPED_V4: {\n        // NOTE: Requests from opensea are already a json string\n        const data = (params as SignTypedParams)[1];\n        if (typeof data === 'string') {\n          return data;\n        } else return JSON.stringify(data);\n      }\n      case WallyMethodName.SEND_TRANSACTION:\n      case WallyMethodName.SIGN_TRANSACTION: {\n        const { gas, gasLimit, ...txn } = (params as WTransactionRequest[])[0];\n        return JSON.stringify({\n          ...txn,\n          gasLimit: gasLimit || gas,\n        });\n      }\n      default:\n        return JSON.stringify(params);\n    }\n  }\n\n  private isJSONContentType(method: WallyMethodName): boolean {\n    return (\n      [\n        WallyMethodName.SIGN,\n        WallyMethodName.PERSONAL_SIGN,\n        WallyMethodName.SIGN_TYPED,\n        WallyMethodName.SIGN_TYPED_V4,\n        WallyMethodName.SIGN_TRANSACTION,\n        WallyMethodName.SEND_TRANSACTION,\n      ].indexOf(method) > -1\n    );\n  }\n\n  private formatWallyResponse<T extends WallyMethodName>(\n    method: T,\n    data: any\n  ): WallyResponse<T> | null {\n    switch (method) {\n      case WallyMethodName.ACCOUNTS:\n      case WallyMethodName.REQUEST_ACCOUNTS: {\n        const { address } = data;\n        this.auth.selectedAddress = address;\n        return [address] as WallyResponse<T>;\n      }\n      case WallyMethodName.SIGN:\n      case WallyMethodName.PERSONAL_SIGN:\n      case WallyMethodName.SIGN_TRANSACTION:\n      case WallyMethodName.SIGN_TYPED:\n      case WallyMethodName.SIGN_TYPED_V4: {\n        const { signature } = data;\n        return signature;\n      }\n      case WallyMethodName.SEND_TRANSACTION: {\n        const { hash } = data;\n        return hash;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Method used doing wallet-related actions like requesting accounts\n   * and signing things - actions that require wallet/private key access\n   * and are basically the core wally value prop.\n   * @param method The RPC method name associated with the wally api call\n   * @param params The json rpc spec params (*not* wally's spec)\n   * @returns WallyResponse - adheres to the json rpc spec\n   */\n  private async requestWally<T extends WallyMethodName>(\n    method: T,\n    params: WallyMethodParams<T>\n  ): Promise<WallyResponse<T> | null> {\n    let resp: Response;\n    try {\n      resp = await fetch(`${this.host}/oauth/${WALLY_ROUTES[method]}`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.auth.getToken()}`,\n          ...(this.isJSONContentType(method)\n            ? { 'Content-Type': 'application/json' }\n            : {}),\n        },\n        ...(params &&\n          params.length > 0 && {\n            body: this.formatWallyParams(method, params),\n          }),\n      });\n      if (resp && resp?.ok && resp?.status < 300) {\n        const data = await resp.json();\n        return this.formatWallyResponse(method, data);\n      } else {\n        console.error(\n          `The Wally server returned a non-successful response when handling method: ${method}`\n        );\n      }\n    } catch (err) {\n      console.error(\n        `Wally server returned error: ${err} when handling method: ${method}`\n      );\n    }\n\n    return Promise.reject(new Error(`Invalid response for ${method}`));\n  }\n\n  /**\n   * Handle other non-wally-specific methods - forwards to ethers/alchemy\n   * on the backend\n   * @param method The RPC method name\n   * @param params The json rpc spec params\n   * @returns RPCResponse - adheres to the json rpc spec\n   */\n  private async requestRPC<T extends RPCMethodName>(\n    method: T,\n    params: RPCMethodParams<T>\n  ): Promise<RPCResponse<T> | null> {\n    try {\n      const resp = await fetch(`${this.host}/oauth/wallet/send`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${this.auth.getToken()}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          method,\n          params,\n          clientId: this.clientId,\n        }),\n      });\n\n      if (!resp.ok || resp.status >= 300) {\n        console.error(\n          `Wally server returned a non-successful response when handling method: ${method}`\n        );\n      }\n\n      const contentType = resp.headers.get('content-type');\n      if (contentType && contentType.indexOf('application/json') !== -1) {\n        const json = await resp.json();\n        return json;\n      } else {\n        const text = await resp.text();\n        return text as RPCResponse<T>;\n      }\n    } catch (err) {\n      console.error(\n        `Wally server returned error: ${err} when handling method: ${method}`\n      );\n    }\n    return Promise.reject(new Error(`Invalid response for ${method}`));\n  }\n}\n"]}